plugins {
    id 'java'
    id 'jacoco'

}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.7'

    //  테스트결과 리포트를 저장할 경로 변경
    //  default는 "$/jacoco"
    //  reportsDir = file("$buildDir/customJacocoReportDir")
}

group 'com.com.autocopy'
version '1.0.0'

repositories {
    mavenCentral()
}


dependencies {
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        excludes = [
            'com.autocopy.Main'
        ]
    }
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.enabled true
        xml.enabled false
        csv.enabled false

        //  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
        //  html.destination file("$buildDir/jacocoHtml")
        //  xml.destination file("$buildDir/jacoco.xml")
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            excludes = [
                    'com.autocopy.Main'
            ]
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}